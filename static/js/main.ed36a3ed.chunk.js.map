{"version":3,"sources":["index.js"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_dom_client__WEBPACK_IMPORTED_MODULE_1__","react_dom_client__WEBPACK_IMPORTED_MODULE_1___default","three__WEBPACK_IMPORTED_MODULE_3__","three_examples_jsm_controls_OrbitControls_js__WEBPACK_IMPORTED_MODULE_4__","three_examples_jsm_libs_stats_module_js__WEBPACK_IMPORTED_MODULE_5__","ThreeScene","useEffect","stats","Stats","document","body","appendChild","dom","scene","THREE","background","camera","window","innerWidth","innerHeight","renderer","antialias","powerPreference","alpha","setPixelRatio","devicePixelRatio","setSize","shadowMap","enabled","type","rootElement","getElementById","Error","domElement","ambientLight","add","dirLight","position","set","castShadow","shadow","mapSize","width","height","near","far","hemiLight","controls","OrbitControls","enableDamping","dampingFactor","enableZoom","minDistance","maxDistance","maxPolarAngle","Math","PI","minAzimuthAngle","maxAzimuthAngle","woodMaterial","color","roughness","metalness","mattressMaterial","floorMaterial","wallMaterial","addOutline","mesh","edges","geometry","outlineMaterial","outline","copy","rotation","scale","addEventListener","aspect","updateProjectionMatrix","angleDisplay","createElement","style","bottom","left","backgroundColor","padding","fontFamily","fontSize","bedFrame","frameGeometry","receiveShadow","legGeometry","forEach","pos","leg","createBedFrame","mattress","mattressGeometry","createMattress","floor","floorGeometry","x","y","createFloor","table","tableGeometry","createTable","wallLeft","wallGeometry","createWallLeft","wallRight","createWallRight","target","update","initScene","animate","requestAnimationFrame","render","azimuthAngleRad","getAzimuthalAngle","polarAngleRad","getPolarAngle","azimuthAngleDeg","radToDeg","polarAngleDeg","innerHTML","toFixed","updateAngleDisplay","error","console","message","React","id","ReactDOM","createRoot"],"mappings":"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","file":"static/js/main.ed36a3ed.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\"; // Ensure any styles are imported\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls.js\";\nimport Stats from \"three/examples/jsm/libs/stats.module.js\";\n\nfunction ThreeScene() {\n  useEffect(() => {\n    try {\n      // Initialize stats\n      const stats = new Stats();\n      document.body.appendChild(stats.dom);\n\n      // Set up the scene, camera, and renderer\n      const scene = new THREE.Scene();\n      scene.background = new THREE.Color(0x663399);\n\n      const camera = new THREE.PerspectiveCamera(\n        75,\n        window.innerWidth / window.innerHeight,\n        0.1,\n        1000\n      );\n\n      // Enhanced renderer settings\n      const renderer = new THREE.WebGLRenderer({\n        antialias: true,\n        powerPreference: \"high-performance\",\n        alpha: true,\n      });\n      renderer.setPixelRatio(window.devicePixelRatio);\n      renderer.setSize(window.innerWidth, window.innerHeight);\n      renderer.shadowMap.enabled = true;\n      renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n\n      // Append renderer to the 'root' element\n      const rootElement = document.getElementById(\"root\");\n      if (!rootElement) {\n        throw new Error(\"Root element not found\");\n      }\n      rootElement.appendChild(renderer.domElement);\n\n      // Add ambient light\n      const ambientLight = new THREE.AmbientLight(0xffffff, 0.3);\n      scene.add(ambientLight);\n\n      // Add directional light\n      const dirLight = new THREE.DirectionalLight(0xffffff, 0.8);\n      dirLight.position.set(4, 4, 4);\n      dirLight.castShadow = true;\n      dirLight.shadow.mapSize.width = 1024;\n      dirLight.shadow.mapSize.height = 1024;\n      dirLight.shadow.camera.near = 0.5;\n      dirLight.shadow.camera.far = 50;\n      scene.add(dirLight);\n\n      // Add a hemisphere light for better ambient lighting\n      const hemiLight = new THREE.HemisphereLight(0xffffff, 0x444444, 0.5);\n      hemiLight.position.set(0, 20, 0);\n      scene.add(hemiLight);\n\n      // Enhanced orbit controls\n      const controls = new OrbitControls(camera, renderer.domElement);\n      controls.enableDamping = true;\n      controls.dampingFactor = 0.25;\n      controls.enableZoom = true;\n      controls.minDistance = 4;\n      controls.maxDistance = 16;\n      controls.maxPolarAngle = Math.PI / 2;\n      controls.minAzimuthAngle = 0;\n      controls.maxAzimuthAngle = Math.PI / 2;\n\n      // Create enhanced materials\n      const woodMaterial = new THREE.MeshStandardMaterial({\n        color: 0x8b4513,\n        roughness: 0.7,\n        metalness: 0.1,\n      });\n      const mattressMaterial = new THREE.MeshStandardMaterial({\n        color: 0xffffff,\n        roughness: 0.5,\n        metalness: 0,\n      });\n\n      const floorMaterial = new THREE.MeshStandardMaterial({\n        color: 0x808080,\n        roughness: 0.9,\n        metalness: 0,\n      });\n\n      const wallMaterial = new THREE.MeshStandardMaterial({\n        color: 0x808080,\n        roughness: 0.9,\n        metalness: 0,\n      });\n\n      /**\n       * Adds an outline to a given mesh.\n       * @param {THREE.Mesh} mesh - The mesh to which the outline will be added.\n       */\n      function addOutline(mesh) {\n        const edges = new THREE.EdgesGeometry(mesh.geometry);\n        const outlineMaterial = new THREE.LineBasicMaterial({\n          color: 0x000000,\n        });\n        const outline = new THREE.LineSegments(edges, outlineMaterial);\n        outline.position.copy(mesh.position);\n        outline.rotation.copy(mesh.rotation);\n        outline.scale.copy(mesh.scale);\n        scene.add(outline);\n      }\n\n      /**\n       * Initializes the scene with objects and lights.\n       */\n      function initScene() {\n        const bedFrame = createBedFrame();\n        const mattress = createMattress();\n        const floor = createFloor();\n        const table = createTable();\n        const wallLeft = createWallLeft();\n        const wallRight = createWallRight();\n\n        // Add outlines\n        addOutline(bedFrame);\n        addOutline(mattress);\n        addOutline(floor);\n        addOutline(table);\n        addOutline(wallLeft);\n        addOutline(wallRight);\n\n        centerCamera();\n      }\n\n      /**\n       * Creates the bed frame with legs and adds it to the scene.\n       * @returns {THREE.Mesh} The bed frame mesh.\n       */\n      function createBedFrame() {\n        const frameGeometry = new THREE.BoxGeometry(2, 0.25, 4);\n        const bedFrame = new THREE.Mesh(frameGeometry, woodMaterial);\n        bedFrame.position.set(0, 2, 0);\n        bedFrame.castShadow = true;\n        bedFrame.receiveShadow = true;\n        scene.add(bedFrame);\n\n        // Create bed legs\n        const legGeometry = new THREE.CylinderGeometry(0.1, 0.1, 2, 16);\n        const legPositions = [\n          [-0.95, 1, -1.95],\n          [0.95, 1, -1.95],\n          [-0.95, 1, 1.95],\n          [0.95, 1, 1.95],\n        ];\n        legPositions.forEach((pos) => {\n          const leg = new THREE.Mesh(legGeometry, woodMaterial);\n          leg.position.set(...pos);\n          leg.castShadow = true;\n          leg.receiveShadow = true;\n          scene.add(leg);\n          addOutline(leg); // Add outline to each leg\n        });\n\n        return bedFrame;\n      }\n\n      /**\n       * Creates the mattress and adds it to the scene.\n       * @returns {THREE.Mesh} The mattress mesh.\n       */\n      function createMattress() {\n        const mattressGeometry = new THREE.BoxGeometry(2, 0.25, 4);\n        const mattress = new THREE.Mesh(mattressGeometry, mattressMaterial);\n        mattress.position.set(0, 2.25, 0);\n        mattress.castShadow = true;\n        mattress.receiveShadow = true;\n        scene.add(mattress);\n        return mattress;\n      }\n\n      /**\n       * Creates a simple table with legs and adds it to the scene.\n       * @returns {THREE.Mesh} The table mesh.\n       */\n      function createTable() {\n        const tableGeometry = new THREE.BoxGeometry(2, 0.25, 2);\n        const table = new THREE.Mesh(tableGeometry, woodMaterial);\n        table.position.set(0, 1, 0); // Position it under the bed frame\n        table.castShadow = true;\n        table.receiveShadow = true;\n        scene.add(table);\n\n        // Create table legs\n        const legGeometry = new THREE.CylinderGeometry(0.1, 0.1, 1, 16);\n        const legPositions = [\n          [-0.95, 0.5, -0.95],\n          [0.95, 0.5, -0.95],\n          [-0.95, 0.5, 0.95],\n          [0.95, 0.5, 0.95],\n        ];\n        legPositions.forEach((pos) => {\n          const leg = new THREE.Mesh(legGeometry, woodMaterial);\n          leg.position.set(...pos);\n          leg.castShadow = true;\n          leg.receiveShadow = true;\n          scene.add(leg);\n          addOutline(leg); // Add outline to each leg\n        });\n\n        return table;\n      }\n\n      /**\n       * Creates the floor and adds it to the scene.\n       * @returns {THREE.Mesh} The floor mesh.\n       */\n      function createFloor() {\n        const floorGeometry = new THREE.PlaneGeometry(8, 8);\n\n        const floor = new THREE.Mesh(floorGeometry, floorMaterial);\n        floor.rotation.x = -Math.PI / 2; // Rotate to be horizontal\n        floor.position.y = 0; // Position it at the bottom\n        floor.receiveShadow = true;\n        scene.add(floor);\n        return floor;\n      }\n\n      /**\n       * Creates the left wall and adds it to the scene.\n       * @returns {THREE.Mesh} The left wall mesh.\n       */\n      function createWallLeft() {\n        const wallGeometry = new THREE.PlaneGeometry(8, 8);\n        const wallLeft = new THREE.Mesh(wallGeometry, wallMaterial);\n        wallLeft.rotation.y = Math.PI / 2; // Rotate to be perpendicular\n        wallLeft.position.set(-4, 4, 0); // Positioned to the left\n        wallLeft.receiveShadow = true;\n        scene.add(wallLeft);\n\n        return wallLeft;\n      }\n\n      /**\n       * Creates the right wall and adds it to the scene.\n       * @returns {THREE.Mesh} The right wall mesh.\n       */\n      function createWallRight() {\n        const wallGeometry = new THREE.PlaneGeometry(8, 8);\n        const wallRight = new THREE.Mesh(wallGeometry, wallMaterial);\n        wallRight.position.set(0, 4, -4);\n        wallRight.receiveShadow = true;\n        scene.add(wallRight);\n\n        return wallRight;\n      }\n\n      /**\n       * Centers the camera initially.\n       */\n      function centerCamera() {\n        camera.position.set(8, 8, 8); // Initial camera position\n        controls.target.set(0, 0, 0);\n        controls.update();\n      }\n\n      /**\n       * Handles window resize events to adjust camera and renderer.\n       */\n      function onWindowResize() {\n        camera.aspect = window.innerWidth / window.innerHeight;\n        camera.updateProjectionMatrix();\n        renderer.setSize(window.innerWidth, window.innerHeight);\n      }\n\n      window.addEventListener(\"resize\", onWindowResize);\n\n\n      // Display angles in radians\n      const angleDisplay = document.createElement(\"div\");\n      angleDisplay.style.position = \"absolute\";\n      angleDisplay.style.bottom = \"10px\";\n      angleDisplay.style.left = \"10px\";\n      angleDisplay.style.color = \"white\";\n      angleDisplay.style.backgroundColor = \"rgba(0, 0, 0, 0.5)\";\n      angleDisplay.style.padding = \"5px\";\n      angleDisplay.style.fontFamily = \"monospace\";\n      angleDisplay.style.fontSize = \"12px\";\n      document.body.appendChild(angleDisplay);\n\n      /**\n       * Updates the angle display with the current azimuth and polar angles.\n       */\n      function updateAngleDisplay() {\n        const azimuthAngleRad = controls.getAzimuthalAngle();\n        const polarAngleRad = controls.getPolarAngle();\n        const azimuthAngleDeg = THREE.MathUtils.radToDeg(azimuthAngleRad);\n        const polarAngleDeg = THREE.MathUtils.radToDeg(polarAngleRad);\n\n        angleDisplay.innerHTML = `Azimuth Angle: ${azimuthAngleRad.toFixed(2)} rad (${azimuthAngleDeg.toFixed(2)}°)<br>Polar Angle: ${polarAngleRad.toFixed(2)} rad (${polarAngleDeg.toFixed(2)}°)`;\n      }\n\n      /**\n       * Animates the scene, updating controls, stats, and rendering.\n       */\n      function animate() {\n        requestAnimationFrame(animate);\n        controls.update();\n        stats.update();\n        renderer.render(scene, camera);\n        updateAngleDisplay();\n      }\n\n      // Initialize and start animation\n      initScene();\n      animate();\n    } catch (error) {\n      console.error(\"Error initializing scene:\", error);\n      // Display error on page\n      document.body.innerHTML = `<div style=\"color: white; padding: 20px;\">\n        Error initializing scene: ${error.message}\n      </div>`;\n    }\n  }, []);\n\n  return <div id=\"root\"></div>;\n}\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(<ThreeScene />);\n"],"sourceRoot":""}